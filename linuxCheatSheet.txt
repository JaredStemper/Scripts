==========================================
Cheatsheet for basic Linux commands
==========================================

#General Linux

	#OS configs
			neofetch                                   #nice gui system properties
			uname -or                                  #kernel detection
			lsb_release -irc                           #a way to check the release version (with it the codename of the distribution)
			ls /sys/firmware/efi/                      # if the folder does not exist, then you are using BIOS. i could see it, thus i am using UEFI
	#OS configs
	#vendor/model
	To find the vendor and model name of the processor, search the /proc/cpuinfo file with the grep command.       
			cat /proc/cpuinfo | grep vendor | uniq
						 ...  | grep 'model name' | ...
	#vendor/model
	#architecture
			sudo lshw                                  #pretty much tells you everything
			lscpu                                      #reports the architecture
			cat /proc/cpuinfo | grep -i 'core id'      #shows a unique id for each core in a single processor. Counting the core id would give a clear indication of the number of actual cores on the processor
			xdpyinfo | grep dimensions                 #shows dimensions of screen
	#architecture
	#bluetooth
			dmesg | grep -i blue                       #shows if you have bluetooth capabilities
			lsusb | grep Bluetooth                     #this will not work if your bluetooth device is using UART, not USB (if part of a SOC)
	#bluetooth
	#network
			ping www.example.com
			tracepath www.example.com                          #replacement for traceroute. No privs needed except to send UDP packets
			ssh endpoint -t  "cd path; bash"                   #runs a command into a non-interactive shell directly after sshing in
			scp /local/file r_host:path/remote/file            #Copy a local file to a remote host
	#network
	#system
			systemctl reboot --firmware-setup                  #boot directly into firmware setup (boot order BIOS system info). also shift, ESC, f2, del, are all common hotkeys to enter the BIOS during system setup, but the delay is currently set to zero, so you need to hold it down immediately
			#to run command at startup start up put in the file: /etc/rc.local
			lspci                                              #lists information about all PCI buses in the system and all devices connected to them
			fdisk -l                                           #displays all partioned devices (e.g. usb sticks/drive) (inlcuding those not mounted)
			speedtest-cli                                      #performs a speedtest in terminal using speedtest.net API
			dconf-editor                                       #Graphical editor for gsettings and dconf
			gparted                                            #GNOME partition editor for viewing, creating, reorganizing, and deleting disk partitions
			dpkg -l                                            #list all installed packages dpkg==debian package manager
			 sensors -f														 #display CPU temperature
	#system
	#tasks
			fuser /path/to/.nfs||other file                    #identifies process using files
			top                                                #displays and active list of all Linux processes
			ps -ef | grep firefox                              #reports a snapshot of the current processes and then greps results for task
			   #returns:  given_PID ? Sl current_time /usr/lib/firefox-3.5.3/firefox
			ps                                                 #reports a snapshot of the current processes.
			ps -ef | grep firefox                              #find running task from snapshot using grep
	#tasks
		flameshot gui											 #advanced screen shot program. fire flame spark screenshot
		kill -9 given_PID											 #kill task
	#tasks
	#shortcuts/hotkeys
		xev | grep keysym                                  #find what keys are simulated when pressing stuff (e.g. fn+brightnessUp==F3)
				remap fn stuff with xmodmap                #can map custom keys using fn
				xmodmap -e 'keysym XF86AudioPrev = Home'
		further details below in "Shortcuts/hotkeys cont"

		locate keybindings | xargs grep -H -i f1           #do search for keybinding files with f1 in them

		gnome-tweak-tool is a well made GUI for doing many simplified changes
	#shortcuts/hotkeys
	#background settings change 
		sudo lightdm-gtk-greeter-settings                               #background settings GUI config
		gedit sudo gedit /usr/share/gnome-shell/theme/ubuntu.css        #ctl+f for lockDialogGroup and edit file. If chaning from purple background, change from resource:/// to file:///
	#background settings change 
	#standard tips
		sudo -i                                            #log in as root << be careful with that
		su jared                                           #log in as user jared

		rm file.txt
		rm -r etc                                          #removes a full directory

		cp file.txt copy_file.txt
		cp -a /folder/. /destinationfolder/                #copies the contents of one folder to another.
				-a is a recursive flag that preserves all file attributes
				-R is a recursive flag
				. 	copy all files and folders directly from one dir to the next (instead of copying a dir into a dir)
		cat > txtFile                                              #directs input (typed words) into file
		
		mv file.txt home/jared/Downloads
		mv -t DESTINATION file1 file2 file3

		man [command]                                      #shows detailed manuals for command
		man -f [command]                                   #equivalent to the 'whois' command, it displays a short of what the command does inside of the terminal

		history -d NUMBER                                  #deletes ~single~ target line at number
				#Ctrl + R to search previous commands in the terminal
				for i in {1..LAST_RUN}; do history -d LINE_TO_DELETE; done
						deletes at a certain line repeatedly LAST_RUN many times
		echo 'Hello' >newFile.txt                          #create a new text file (with given input)
		ln -s targetfile optionalNameChange                #creates symbolic link (symlink) (-s) file in pwd
		#grep
			grep -H "..."						#output includes filename
			grep -n "..."						#output includes line number
			grep --exclude="filename.*"			#pattern to exclude a file or file type from a search 
													(can be used repeatedly (e.g. --exclude=".txt" --exclude="*.png"))
		#grep
		#append
			cat file1 >> file2                                 #appends the output to the named file or creates the named file if it does not exist
			cat file1 file2 > file3                            #concatenates two or more files to one. Will overwrite existing file!
					cat *.txt >> newfile.txt                   #no limit to source files when appending in this method
			cat file1 | tee -a file2 file3 file4               #appends file contents to as many files as you like
					-a, --append: to append to the given files, does not overwrite
			cat -e -t -v Makefile                              #cats file with \t marking tabs and $ signifying endlines. Useful for debugging tabs/spaces issues
		#append
		xdg-open filename.png                              #will open a file (equivalent of double-clicking on it)
	#standard tips
	#shred
			shred -s 10 - > fileNameInCurrentDir               #writes 10 random bytes of data to stdout and redirects it to a file
			shred existing-File                                #overwrites file with random garbage data
	#shred

   #xclip
		xclip -sel clip < ~/filename.txt                   #copies contents of file to clipboard
		# Only copy the content to the X clipboard
		cat file | xclip
		# If you want to paste somewhere else other than a X application, try
		cat file | xclip -selection clipboard
   #xclip


   #tar
        tar -xzvf archive.tar.gz                           #decompress a tar.gz file
                -x extract
                -c create an archive
                -z compress archive with gzip
                -v display progress in terminal while creating archive "verbose" mode
                -f allows you to specify the filename
                --exclude allows you to exclude an directory/file in the process
                        Ex. tar -czvf archive.tar.gz /home/ubuntu --exclude=/home/ubuntu/Downloads --exclude=/home/ubuntu/.cache
                Ex. of a similar format to extract the contents of the archive to a specific directory: tar -xzvf archive.tar.gz -C /tmp
   #tar
#General Linux


#tips and tricks
   tldr package (e.g. man)                         #gives succinct explanation of tool command and a short list of common uses and examples
   ^incorrect^correct                              #caret used to replace misspelling in previous command

   #sudo apt-get install trash-cli  #command-line interface to the same trash can that GNOME (can be recovered)
         # other commands in the trash-cli package are trash-list, trash-empty, and restore-trash
   alias rm=trash

   unalias $someAlias                        #used to remove an alias in the current shell. can be used in bashrc/bash_aliases to permanently "remove" an alias

   #sed 
      (Stream EDitor - perform operations on a text file and display result)  
        sed [option] '{script}' [text file]

                -i directly edit input file (as opposed to using > || >> to write to the file)
                '2,4 d'  deletes lines 2-4
                '/^#/ d' deletes all lines that start with # (removes comments from code, or ruins a c program lol)
                        '/regex/ d' test.ex
                        '/regex1/,/regex2/ d' removes lines between the two regex
                -re 's/^# */bob/' replace # with bob (if at start of line, think comments in code)

                's/foo/bar/'             # replaces only 1st instance in a line
                's/foo/bar/4'            # replaces only 4th instance in a line
                's/foo/bar/g'            # replaces ALL instances in a line
                's/foo/bar/I'            # replaces with case sensitive pattern 
   #sed - Stream EDitor - perform operations on a text file and display result
	
   #sorting
          Using < you can redirect the input to come from a file rather than the keyboard. For example, to sort the list of fruit, type

               % sort < biglist

         and the sorted list will be output to the screen.

         To output the sorted list to a file, type,

         % sort < biglist > slist
   #sorting

   #latex        
	   pdflatex file.tex #then hit enter and run
   #latex        

   #cht.sh     
	   (https://github.com/chubin/cheat.sh cheat sheet cheatsheet)
	   curl cht.sh/python/dictionary                #get examples and description of a tool through the repository of answers or automatic searching in stackoverflow
	   curl cht.sh/python/dictionary/1                 #views additional answer (1,2,3,etc.)
	   \?Q                           #only code, no comments (e.g. curl cht.sh/python/dictionary\?Q)
   #cht.sh
   
#tips and tricks
#regex
	#characters
	\h			match horizontal whitespace (any tab/space from ascii set, non-breaking space from extended ASCII, or a number of Unicode characters)
	\v			match verical space (matches next line (not caught by \s), line separator, paragraph separator, carriage return, line feed, line tabulation, form feed
				NOTE: \h and \v only work on the languages which supports PCRE, such as Perl

	\d			Most engines: one digit from 0 to 9	file_\d\d											
				.NET, Python 3: one Unicode digit in any script	file_\d\d	
					matches: file_25
					matches: file_9੩
	\w			Most engines: "word character": ASCII letter, digit or underscore	\w-\w\w\w	
	\w			.Python 3: "word character": Unicode letter, ideogram, digit, or underscore	\w-\w\w\w	
	\w			.NET: "word character": Unicode letter, ideogram, digit, or connector	\w-\w\w\w	
					matches: A-b_1
					matches: 字-ま_۳
					matches: 字-ま‿۳
	\s			Most engines: "whitespace character": space, tab, newline, carriage return, vertical tab	a\sb\sc	
	\s			.NET, Python 3, JavaScript: "whitespace character": any Unicode separator	a\sb\sc	
					matches: a b	c
					matches: a b	c
	\D			One character that is not a digit as defined by your engine's \d	\D\D\D	ABC
	\W			One character that is not a word character as defined by your engine's \w	\W\W\W\W\W	*-+=)
	\S			One character that is not a whitespace character as defined by your engine's \s	\S\S\S\S	Yoyo

	.			Any character except line break	
					a.c	abc
	.			Any character except line break	
					.*	whatever, man.
	\.			A period (special character: needs to be escaped by a \)	
					a\.c	a.c
	\			Escapes a special character	
					\.\*\+\?    \$\^\/\\	.*+?    $^/\
	\			Escapes a special character	
					\[\{\(\)\}\]	[{()}]
	#characters
	#character classes
		-			Range indicator	
						[a-z]	One lowercase letter
		[ … ]		One of the characters in the brackets	
						[AEIOU]	One uppercase vowel
		[ … ]		One of the characters in the brackets	
						T[ao]p	Tap or Top
		[x-y]		One of the characters in the range from x to y	
						[A-Z]+	GREAT
		[ … ]		One of the characters in the brackets	
						[AB1-5w-z]	One of either: A,B,1,2,3,4,5,w,x,y,z
		[x-y]		One of the characters in the range from x to y	
						[ -~]+	Characters in the printable section of the ASCII table.
		[^x]		One character that is not x	
						[^a-z]{3}	A1!
		[^x-y]		One of the characters not in the range from x to y	
						[^ -~]+	Characters that are not in the printable section of the ASCII table.
		[\d\D]		One character that is a digit or a non-digit	
						[\d\D]+		Any characters, inc\nluding new lines, which the regular dot doesn't match
		[\x41]		Matches the character at hexadecimal position 41 in the ASCII table, 
						i.e. A
		#operations
			[…-[…]]		character class subtraction. One character that is in those on the left, but not in the subtracted class.	
							[a-z-[aeiou]]			Any lowercase consonant
								.NET: 
			[…-[…]]		character class subtraction.	
							[\p{IsArabic}-[\D]]		An Arabic character that is not a non-digit, i.e., an Arabic digit
								.NET: 
			[…&&[…]]	character class intersection. One character that is both in those on the left and in the && class.	
							[\S&&[\D]]	An non-whitespace character that is a non-digit.						
								Java, Ruby 2+:
			[…&&[…]]	character class intersection.	
							[\S&&[\D]&&[^a-zA-Z]]	An non-whitespace character that a non-digit and not a letter.
								Java, Ruby 2+:
			[…&&[^…]]	character class subtraction is obtained by intersecting a class with a negated class	
							[a-z&&[^aeiou]]	An English lowercase letter that is not a vowel.
								Java, Ruby 2+:
			[…&&[^…]]	character class subtraction	
							[\p{InArabic}&&[^\p{L}\p{N}]]	An Arabic character that is not a letter or a number
								Java, Ruby 2+:
		#operations
	#character classes
	#quantifiers
		+		One or more	
					Version \w-\w+	Version A-b1_1
		{3}		Exactly three times	
					\D{3}	ABC
		{2,4}	Two to four times	
					\d{2,4}	156
		{3,}	Three or more times	
					\w{3,}	regex_tutorial
		*		Zero or more times	
					A*B*C*	AAACC
		?		Once or none	
					plurals?	plural
		+		The + (one or more) is "greedy"	
					\d+		12345
		?		Makes quantifiers "lazy"	
					\d+?	1 in 12345
		*		The * (zero or more) is "greedy"	
					A*		AAA
		?		Makes quantifiers "lazy"	
					A*?		empty in AAA
		{2,4}	Two to four times, "greedy"	
					\w		{2,4}	abcd
		?		Makes quantifiers "lazy"	
					\w{2,4}?	ab in abcd
	#quantifiers
	#inline modifiers
		(?i)	Case-insensitive mode
					(?i)Monday	monDAY
						(except JavaScript)	
		(?s)	DOTALL mode. The dot (.) matches new line characters (\r\n). Also known as "single-line mode" because the dot treats the entire input as a single line	
					(?s)From A.*to Z	From A\nto Z
						(except JS and Ruby).
		(?m)	Multiline mode
					(?m)1\r\n^2$\r\n^3$	
						(except Ruby and JS) ^ and $ match at the beginning and end of every line	
		(?m)	In Ruby: the same as (?s) in other engines, i.e. DOTALL mode, i.e. dot matches line breaks	
					(?m)From A.*to Z	From A\nto Z
		(?x)	Free-Spacing Mode mode (Also known as comment mode or whitespace mode)
					(?x) # this is a
					# comment 				                    		matches: abc d
					abc # write on multiple
					# lines
					[ ]d # spaces must be
							# in brackets	
		(?n)	Turns all (parentheses) into non-capture groups. To capture, use named groups.	
						.NET, PCRE 10.30+: named capture only	
		(?d)	The dot and the ^ and $ anchors are only affected by \n	
						Java: Unix linebreaks only	
		(?^)	unset modifiers	(Unsets ismnx modifiers)
						PCRE 10.32+: 
	#inline modifiers
	#lookarounds
		(?=…)	Positive lookahead	
					(?=\d{10})\d{5}	01234 in 0123456789
		(?<=…)	Positive lookbehind	
					(?<=\d)cat	cat in 1cat
		(?!…)	Negative lookahead	
					(?!theatre)the\w+	theme
		(?<!…)	Negative lookbehind	
					\w{3}(?<!mon)ster	Munster
	#lookarounds
	#anchors/boundaries
		^		Start of string or start of line depending on multiline mode. (But when [^inside brackets], it means "not")	
					^abc .*	abc (line start)
		$		End of string or end of line depending on multiline mode. Many engine-dependent subtleties.	
					.*? the end$	this is the end
		\A		Beginning of string
					\Aabc[\d\D]*	abc (string...\n...start)
						(all major engines except JS)	
		\z		Very end of the string
					the end\z	this is...\n...the end
						Not available in Python and JS	
		\Z		End of string or (except Python) before final line break
					the end\Z	this is...\n...the end\n
						Not available in JS
		\G		Beginning of String or End of Previous Match
						.NET, Java, PCRE (C, PHP, R…), Perl, Ruby		
		\b		Word boundary
					Bob.*\bcat\b	Bob ate the cat
						Most engines: position where one side only is an ASCII letter, digit or underscore	
		\b		Word boundary
					Bob.*\b\кошка\b	Bob ate the кошка
						.NET, Java, Python 3, Ruby: position where one side only is a Unicode letter, digit or underscore	
		\B		Not a word boundary	
					c.*\Bcat\B.*	copycats
	#anchors/boundaries
	#logic
		|		Alternation / OR operand	
					22|33	33
		( … )	Capturing group	
					A(nt|pple)	Apple (captures "pple")
		\1		Contents of Group 1	
					r(\w)g\1x	regex
		\2		Contents of Group 2	
					(\d\d)\+(\d\d)=\2\+\1	12+65=65+12
		(?: … )	Non-capturing group	
					A(?:nt|pple)	Apple
	#logic
	#whitepace
		\t		Tab
					T\t\w{2}	T     ab
		\r		Carriage return character	
		\n		Line feed character
		\r\n	Line separator on Windows	
					AB\r\nCD	AB\nCD
		\N		one character that is not a line break	
					\N+			ABC
						Perl, PCRE (C, PHP, R…): 
		\h		one horizontal whitespace character: tab or Unicode space separator		
						Perl, PCRE (C, PHP, R…), Java: 
		\H		One character that is not a horizontal whitespace		
		\v		vertical tab		
						.NET, JavaScript, Python, Ruby: 	
		\v		one vertical whitespace character: line feed, carriage return, vertical tab, form feed, paragraph or line separator		
						Perl, PCRE (C, PHP, R…), Java: 
		\V		any character that is not a vertical whitespace		
						Perl, PCRE (C, PHP, R…), Java: 
		\R		one line break (carriage return + line feed pair, and all the characters matched by \v)
	#whitespace
	#posix classes
		[:alpha:]	ASCII letters A-Z and a-z
						[8[:alpha:]]+	WellDone88
							PCRE (C, PHP, R…): 
		[:alpha:]	Unicode letter or ideogram
						[[:alpha:]\d]+	кошка99
							Ruby 2: 	
		[:alnum:]	ASCII digits and letters A-Z and a-z
						[[:alnum:]]{10}	ABCDE12345	
							PCRE (C, PHP, R…): 	
		[:alnum:]	Unicode digit, letter or ideogram	
						[:alnum:]]{10}	кошка90210
							Ruby 2: 
		[:punct:]	ASCII punctuation mark	
						[:punct:]]+	?!.,:;
							PCRE (C, PHP, R…): 
		[:punct:]	Unicode punctuation mark
						[[:punct:]]+ ‽,:〽⁆
							Ruby: 
	#posix classes
	#other
		 \K			Keep Out: drop everything that was matched so far from the overall match to be returned	
						prefix\K\d+		12
							Perl, PCRE (C, PHP, R…), Python''s alternate regex engine, Ruby 2+
		\Q…\E	 treat anything between the delimiters as a literal string. Useful to escape metacharacters.	
						\Q(C++ ?)\E		(C++ ?)
							Perl, PCRE (C, PHP, R…), Java	
	#other
#regex

#youtube-dl
		#install
		#update
			sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl;
			sudo chmod a+rx /usr/local/bin/youtube-dl;
		#update
		#install
		
		#automatically set playlist-end value through user input
		youtube-dl --extract-audio --audio-format mp3 -i -o '%(title)s.%(ext)s' --embed-thumbnail --add-metadata --audio-quality 0 --playlist-end ${1} --playlist-end ${2} https://www.youtube.com/playlist?list=PLw9tOEvRg20cBy10SEwKCClDm8ds3mrsi;

		#ffmpeg find song length
		alias songLength='for i in *.mp3; do echo $(ffmpeg -i "$i" 2>&1 | grep -oP "(?<=Duration: )[0-9:]*"), >> test.txt; done'

		#removes all text with () around key phrase (e.g. (lyrics))
		alias songRename='for i in *.mp3; do mv "$i" "`echo $i | sed "s/ ([a-z A-Z0-9_]*video[a-zA-Z0-9_ ]*)//i"`"; done'

		#add/modify song metadata (e.g. Title/Artist)
		alias songRename='ffmpeg -loglevel quiet -i test.mov -codec copy -metadata title="My title" out.mov'

		#ffmpeg modify song metadata (use -codec to avoid losing quality) (can't write the same file)
		ffmpeg -loglevel quiet -i test.mov -codec copy -metadata title="My title" out.mov
#youtube-dl


#xargs
        ls | grep -E "pattern" | xargs -d '\n' -I{} echo {}
        somecommand | xargs -s 50000 echo | xargs -I '{}' -s 100000 rm '{}'
                -d delimiter is: '\n'. can be anything (e.g. ' ', '.',etc)
                -I{}  each line read from the input is buffered internally.
                  This means that there is an upper limit on the length of input line  that  xargs will accept when used with the -I option.
                -s option to increase the amount of buffer space that xargs uses
        ls | grep -E "*-[A-Za-z0-9]*.mp3" | xargs -d '\n' -I{} echo {}
         (Note: this was when i was trying to figure out how to remove the junk characters after song download on youtube-dl
#xargs

#nano
        alt+x disables help menu (text on bottom of screen)
        /etc/nanorc is location of nano config file (one of them anyways)
                still testing, but apparently "unbind ^J main" can be appended to your nanorc file to disable all justifying
        ctrl+\ to search and replace
        ctrl+shift+w to search
        alt+a to set/unset mark (always used to unset lol)
                if you highlight text using set, then hitting tab/shift+tab will indent or remove indents from all the lines highlighted!
        alt+u to undo action
        alt+e to redo action
        ctrl+shift+_ to go to line number/column number
        ctrl+c for current position
#nano

#vim
	vi ~/.vimrc
	set all        list all current vim settings
	set         list vim settings set in vim config/runtime

	set autoindent noexpandtab tabstop=4 shiftwidth=4 softabstop=-1      #use tabs instead of spaces
	set syntax=python       set syntax to specific language
	set nu/nu!              turn on/off line numbers
	set rnu/nornu           turn on/off relative line numbers

	Note: ignorecase/smartcase affects substitutions!
	set ignorecase          case-insensitive searching 
	set smartcase           which will automatically switch to a case-sensitive search if you use any capital letters
							   applies only when set ignorecase is already active
	set foldmethod (fdm)		
	set wrap/wrap!/nowrap	flip text wrapping
	

   ESC to exit from current mode
   (shift+i or i to enter insert mode)
	#open
      vi +$lineNumber file          start vim at specific line number
      vi +/searchTermHere file.c       start vim at location of first instance of search (escape characters with \ )
      vim -o file1 file2 file2         uppercase o to to open windows vertically (default is horizontal)
	#open
	#normal
	   normal mode: (press escape to enter
		#saving
			:w    save
			:q!      	quit without saving
			:wq      	save and quit (q also works to close a singular screen of vim)
			:w file     save the file as filename
			:e || e!	load the latest version, and :e! will do that even if you have unsaved changes.
		#saving
		#modify
			A     start appending text to the end of the curr line
			a     insert text after the current cursor location (often used in conjunction with e (moving to the end of the next word))
			I     insert text at the beginning of the line
			i     insert text before the current cursor location

			D     delete to end of line from cursor
			d0    delete to beginning of line (eats whitespace)
			d^    delete to beginning of line (keeps whitespace)
			<C-U>    delete to beginning of line from cursor (insert mode)
			dw daw   "delete a word" under your cursor

			cc    delete current line, insert mode, and stay at current whitespace/indentation
			cw caw   "change a word". deletes word under your cursor and switchces to insert mode
			c...  Note: c works almost identically to 'd', but switches automatically to insert mode and retain whitespace in some cases

			O     Create a new line for text above the current cursor location (goes to insert mode)
			o     Create a new line for the text below the current cursor location (goes to insert mode)
			   
			r     Replace the character under the cursor
			cc    Remove the whole line and start Insert mode.
			s     Remove the character under the cursor and start Insert mode.
			X     delete the character before the current location
			x     delete the character under the current location
			#combine line trick
			shift+j		takes the next line and appends it to the end of the current line (separated with a new space)
			#combine line trick
		#modify
		#search
			ignorecase and smartcase are currently set in .vimrc, so case is ignore by default unless an upercase letter is used
			for a case sensitive search:  \C (uppercase c) 
			a case insensitive search: \c (lowercase c) 
			e.g. 
			/copyright     is case insensitive
			/Copyright     is case sensitive
			/copyright\C   is case insensitive
			/copyright\c   is case sensitive
		#search
		#replace
			#whitespace
				# used to replace all whitespace
				:%s/\s\+$//e
					%s 		to run :substitute over the range %, which is the entire buffer.
					\s 		to match all whitespace characters.
					\+ 		to match 1 or more of them.
					$ 		to anchor at the end of the line.
					e		to not give an error if there is no match (i.e. the file is already without trailing whitespace).
			#whitespace
			Note: ignorecase/smartcase affects substitutions!
			:,+2s/\[0:4\]/.find(',')/ searches from current position +2 lines and replaces all instances of "[0:4]" with .find(',')
				(equivalent to ":.,.+2s" but the . is unnecessary
			takes first character as delimiter
				e.g. ~file/name/~file/newName~g		would replace all occurences of "file/name" in the file
			Save typing by using \zs and \ze to set the start and end of a pattern. 
				For example:
					:s/Copyright 2007 All Rights Reserved/Copyright 2008 All Rights Reserved/
				becomes:
					:s/Copyright \zs2007\ze All Rights Reserved/2008/

			#symbols
				%/foo/bar/				searches entire file unless a specific range is given
				/foo/bar/g				global. each occurrence in the line is changed, rather than just the first
				/foo/bar/c				confirm. asks to confirm each match before replacing
				/foo/bar/i				case insensitive
				/foo/bar/I				case sensitive
				'a,'bs/foo/bar/g 		Change each 'foo' to 'bar' for all lines from mark a to mark b inclusive
				'<,'>s/foo/bar/g 		change each 'foo' to 'bar' for all lines within a visual selection (When compiled with +visual). 
											Vim automatically appends the visual selection range ('<,'>) for any ex command when you select an area and enter ":"
				g/^baz/s/foo/bar/g 		Change each 'foo' to 'bar' in each line starting with 'baz'
				%s//bar/g 				Replace each match of the last search pattern with 'bar'.
				*\zsfoo/bar/ 			On each line, replace the last occurrence of "foo" with "bar".
			#symbols
			#special
				\0 		inserts the text matched by the entire pattern
				\r 		newline, \n is a null byte (0x00).
    			\& 		ampersand (& is the text that matches the search pattern).
    			\1 		inserts the text of the first backreference. \2 inserts the second backreference, and so on.
			#special
		#replace
		#indent
			5>>      indent 5 lines (from current)
			>%    Increase indent of a braced or bracketed block (place cursor on brace first)
			=%    Reindent a braced or bracketed block (cursor on brace)
			<%    Decrease indent of a braced or bracketed block (cursor on brace)
			]p    Paste text, aligning indentation with surroundings
			#fix tabs
				retab                     redoes all spaces in file according to rules set for spaces/tabs
				(Note: sometimes this will not work. A workaround was to run 4 separate commands)
				set noexpandtab
				retab!
				set expandtab
				retab!
			#fix tabs
			#spaces to tabs
				(leading spaces, of course)
				:set tabstop=2
				:set noexpandtab				# tabs, not spaces
				:%retab!						# used to retabulate the whole file
			#spaces to tabs
			#tabs to spaces
				:set expandtab					#insert spaces whenever a tab is pressed
				:set tabstop=4
				:retab							#change existing tab characters to match current tab settings
				:set shiftwidth=4				#change the number of space characters for indentation
			#tabs to spaces
		#indent
		#copy
			yy    copy the current line, including the newline character.
			3yy      copy three lines, starting from the line where the cursor is positioned.
			y$    copy everything from the cursor to the end of the line.
			y^    copy everything from the cursor to the start of the line.
			yw    copy to the start of the next word.
			yiw      copy the current word.
			y%    copy to the matching character. By default supported pairs are (), {}, and []. Useful to copy text between matching brackets
			:14,29y  copy from line number to line number
			ctrl+shift click/drag		use this to avoid copying the line numbers and instead copy a block of text using the mouse
		#copy
		#paste
			#Put directly from the register without ever entering insert mode, using  "+p
			" 		means ""use the following register";
			+ 		refers to the clipboard
			p 		paste
			#alternative method if clipboard is not accessible to vi. 
			#set paste before entering insert mode
			:set paste
			:set nopaste
		#paste
		#navigation
			0     move cursor to beginning of curr line

			$     move cursor to end of current line
			^     jump to the first non-whitespace character in the line

			J     join line below cursor with the curr linbe
			gg    jump to first line in file
			1G    jump to first line in file
			8G    jump to specific line in file
			G     jump to bottom/last line in file

			H           move cursor to top of page
			M           move cursor to middle of page
			L           move cursor to bottom of page
			z or zt        move top of screen to cursor (<CR> == Enter)
			z. or zz    move center of screen to cursor 
			z- or zb    move bottom of screen to cursor 

			/     search forward
			?     search backwards
			*     if cursor is on word, jumps to next instance of the word
			#     if cursor is one word, jump to previous instance of the word
			can use n/N to cycle through matches of */#/?/'/'

			CTRL + U Scroll up half a page
			CTRL + D Scroll down half a page
			CTRL + E Scroll page up without moving cursor
			CTRL + Y Scroll page down without moving cursor
			Ctrl + o Jump back to previous location
			#marks
				:marks      display the name, line/column of each mark set
				m followed by a letter (e.g.  ma sets mark a at the current position (line and column))
				If you set mark 'a', any mark in the current file that was previously identified as 'a' is removed. (case sensitive)
				` (backtick) followed by a mark-letter will take you directly to the set mark
				' (single quote' ) takes you to the beginning of the line at the mark
				Note: marks do not take you across files, unless you use the global marks (capitals)
				   editing file 2, and have mark A set in file 1 and use `A, Vim will close the current file and take you to mark A in file 1. 
				   If file 2 has unsaved changes, Vim will complain that you haven’t written the file since the last change, and refuse to open the new file.
			#marks
		#navigation
		#window
			(window is a viewport onto a file (buffer). you can use mutl. windows on one buffer, or several windows on diff buffers)
			vim -o file1 file2 file2   uppercase o to to open windows vertically (default is horizontal)

			:sp {myfile.txt}        horizontal split
			:vsp {filename} or :vs {filename}   vertical split

			CTRL+SHIFT+W c       closes current window
			Ctrl+W Q       closes current window

			CTRL+SHIFT+W T       move window to a new tab
			CTRL+W S (upper case)      horizontal splitting
			CTRL+W v (lower case)      vertical splitting
			CTRL+W W        switch between windows (holding CTRL+W and repeatedly typing W also works)
			CTRL+W J (xor K, H, L)     switch to adjacent window (intuitively up, down, left, right)
			CTRL+W =       resize windows to be equal size
			CTRL+W </>        changes width of active pane (can be used w number: <c-w> 20 >)
			CTRL+O            makes current window the only window (no way to go back though...)
						alternative is :vsplit .
			:new / :vnew   open new windows with blank buffers
		#window
		#tab
			 #open
				 vim -p first.txt second.txt
				 :tab split  Edit the same file in two tabs.
					This will work even if the buffer is modified, and a save in either tab saves the file, updating the saved state in both.
				 :tab split        copy the current window to a new tab of its own
			 #open
			 #close
				 :tabclose      close current tab
				 CTRL+SHIFT+W c    close current tab
				 :tabclose {i}     close i-th tab
				 :tabonly    close all other tabs (show only the current tab)
				 :tab drop {file}  open {file} in a new tab, or jump to a window/tab containing the file if there is one
			 #close
				 :tabfind {file}   open a new tab with filename given, searching the 'path' to find it
					The :tabfind command uses Vims 'path' option to determine which directories should be searched when opening the specified file. 
					For example, the following tells Vim to look in the directory containing the current file (.),
					then the current directory (empty text between two commas), then each directory under the current directory ('**')
					   :set path=.,,**
				 :tabedit {file}   edit specified file in a new tab
			 #tab navigation
				:tabs         list all tabs including their displayed windows
				:tabm 0       move current tab to first
				:tabm         move current tab to last
				:tabm {i}     move current tab to position i+1

				:tabn         go to next tab
				:tabp         go to previous tab
				:tabfirst     go to first tab
				:tablast      go to last tab

				gt            go to next tab
				gT            go to previous tab
				{i}gt         go to tab in position i


				Ctrl-PgDn     go to next tab   (also works in insert mode)
				Ctrl-PgUp     go to previous tab (also works in insert mode)
			 #tab navigation
			#tab
			#case
				g~			Toggle case "HellO" to "hELLo" with g~ then a movement.			
				gU			Uppercase "HellO" to "HELLO" with gU then a movement.	
				gu			Lowercase "HellO" to "hello" with gu then a movement.	

				Alternatively, you can visually select text then press ~ to toggle case, or U to convert to uppercase, or u to convert to lowercase. 
			#case
	#normal
	#visual
		visual mode: (v to enter) or (ctrl+v)
		#character
			(use v to enter) (default)
		#character
		#line
			(use shift+v to enter)
			#select function
				python:
				]]    select continuous block of python code below cursor
				[[    select continuous block of python code above cursor
				Note: both latter approaches require you to be on the line with the function name
				if curlyboi on the same line:
				e.g.  function tick() {
						// ... 
				}
				f{ or $     select entire fuction, including definition
				V%d      visual line, move to matching pair, delete
				if curlyboi on next line:
				e.g.  function tick() 
				{
						// ... 
				}
				J     join the current line with the line below 
						 (also puts your cursor at the last character on the resulting line '{')
				V%d      visual line, move to matching pair, delete

				or

				Vj%d

				alternate:
				v{o}d
				v     enter visual mode
				{     move to first brace in function (press more than once if necessary
				o     exchange cursor from top to bottom of function
				d     delete selected text
				y     copy/yank selected text
			#select function
		#line
		#block
			(use ctrl+v to enter)
			#remove characters
				highlight all lines to delete from; press x or use the delete key
			#remove characters
			#append
				after highlighting the block you want to append text to, simple press $ to extend to the end of the line and then press A to put text at the end
					after typing, still hit Escape like usual
			#append
			#comment
				comment selection
				put cursor on first # or //, go down to last commented line and press x (deletes all # characters vertically)
				#uncomment
					uncomment selection
					select until the last line; 
					Shift+I     switch to INSERT mode
					add chosen comment character (#, //). This will add a hash to the first line.
					Esc (give it a second)     insert a # character on all other selected lines
				#uncomment
			#comment
		#block
	#visual
	#misc
		#norm
			:%norm A*
			# % 	= ever line
			# norm  = type the following commands
			# A*	= append the character "*" to the current line
		#norm
		#macro
			#set name
				'q' and then a single letter/number to set macro name
					e.g. '@w'. then 2@w will run that macro twice
			#set name
			#example
				(this will create a macro to delete every other line in a file (if less than 20000 lines))
				Start in mode.
				Go to the beginning of the file by pressing gg.
				Press qq.
				Click arrow down and press dd after.
				Press q.
				Press 10000@q
			#example
		#macro
		#fold
			set foldmethod=value || set fdm=value
			#values
				manual		folds must be defined by entering commands (such as zf)
				indent		groups of lines with the same indent form a fold
				syntax		folds are defined by syntax highlighting
				expr			folds are defined by a user-defined expression
				marker		special characters can be manually or automatically added to your text to flag the start and end of folds
				diff			used to fold unchanged text when viewing differences (automatically set in diff mode)
			#values
			#manual
				zf{motion}		create fold in normal mode
										e.g. zf'a will fold from the current line to wherever the mark a has been set
											  zf3j folds the current line along with the following 3 lines
											  If you want to create folds in a text file that uses curly braces to delimit code blocks ({...}), you can use the command zfa} to create a fold for the current code block.

				Alternatively, an arbitrary group of lines can be folded by selecting them to enter Visual mode and pressing zf. This allows you to preview the section you've selected before you fold it. The above example of folding the current code block could also be accomplished by first selecting the code block delimited by the curly braces (va}) and then creating the fold (zf). Putting this together gives va}zf.

				Manual folds can also be created in Command mode :{range}fo[ld], e.g., the current line along with the following three lines (as in the example above) can be folded by running :,+3fo.

				Use zd to delete the fold at the cursor (no text is deleted, just the fold markers); zD is used to recursively delete folds at the cursor. 
			#manual
			#indent
				'+' (closed) or '-' (open)				Set foldcolumn to at least the level of folds you want displayed will show a sidebar, in which you can see which lines in the file can be folded, or are already folder
			#indent
			#syntax
				:setlocal foldmethod=syntax. 
				Many syntax files define folding based on the language syntax, although you may need to enable it by setting syntax file options. 
				If a specific syntax file doesn't define folding, you can define your own.
				Note that this particular fold method especially may define too many folds for your liking. You can change this using the 'foldnestmax' option, by setting it to a value low enough for your liking.
			#syntax
			#Indent folding with manual folds
				a value low enough for your liking.
				Indent folding with manual folds
				If you like the convenience of having Vim define folds automatically by indent level, but would also like to create folds manually, you can get both by putting this in your vimrc:
					augroup vimrc
					  au BufReadPre * setlocal foldmethod=indent
					  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
					augroup END
				
				The first autocommand sets 'indent' as the fold method before a file is loaded, so that indent-based folds will be defined. The second one allows you to manually create folds while editing. It's executed after the modeline is read, so it won't change the fold method if the modeline set the fold method to something else like 'marker' or 'syntax'
			#Indent folding with manual folds
			#expression
				fold in pretty much any way you desire. For example, you could fold away text not matching a regular expression. See :help 'foldexpr' for details. 
			#expression
			#markers
				use zf and zd to add/remove folds, and all folds are defined manually

				works by adding special markers to your buffer text so that the same folds can be loaded by anyone opening the file in Vim. 
				The markers are defined by the 'foldmarker' option, which defaults to three consecutive open curly braces to start a fold and three consecutive closed curly braces to end a fold. 
				This method is mostly useful when the other options don't give satisfactory results, either because a syntax file does not define folding, you want to break up a file into logical portions instead of syntactical constructs, or you are folding plain text in some way.

				If you change the default 'foldmarker' setting, be sure to communicate the correct setting to other people in some way. An especially effective method for this would be to use a modeline, so that most Vim users will get your intended settings by default when they edit the file. 
			#markers
			#diff
				the default fold method when using Vim in diff mode. 
				Simply running any of the commands to put Vim in diff mode will set this option for you. 
				It works by folding away lines that do not differ between the buffers in the diff, so that you can focus on the lines with differences. 
					Note that you can tweak the number of lines to leave unfolded, using the 'diffopt' option.

				If you want folding in diff/patch files, see Folding for diff files instead. 
			#diff
			#manipulate
				zc 			close a fold (if the cursor is in an open fold)
				zo			open a fold (if the cursor is in a closed fold)
				za			toggle the current fold (close it if it was open, or open it if it was closed).
				zC, zO and zA are similar, but operate on all folding levels (for example, the cursor line may be in an open fold, which is inside another open fold; typing zC would close all folds at the cursor).

				zr			reduces folding by opening one more level of folds throughout the whole buffer (the cursor position is not relevant)
				zR			open all folds.
				zm			gives more folding by closing one more level of folds throughout the whole buffer
				zM			close all folds
			#manipulate
			#mapping
				with the following in your vimrc, you can toggle folds open/closed by pressing F9. In addition, if you have :set foldmethod=manual, you can visually select some lines, then press F9 to create a fold.
					inoremap <F9> <C-O>za
					nnoremap <F9> za
					onoremap <F9> <C-C>za
					vnoremap <F9> zf

				an alternative procedure: 
					In normal mode, press Space to toggle the current fold open/closed. 
					However, if the cursor is not in a fold, move to the right (the default behavior). 
					In addition, with the manual fold method, you can create a fold by visually selecting some lines, then pressing Space.
						nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
						vnoremap <Space> zf

					In the first mapping for Space, @= refers to the expression register (:help @=). 
					The following expression is evaluated when Enter is pressed (<CR>). 
					The value of foldlevel('.') is determined (the fold level at the current line, or zero if the current line is not in a fold). 
					If the result is nonzero (true), the result is 'za' (toggle fold); otherwise it is "\<Space>", which evaluates back to the default behaviour of the <Space> key (move forward by one character). :help expr1 
			#mapping
			#save
				:mkview 	to save folds 
				:loadview 	to load saved loads
			   
				for .vimrc:
					autocmd BufWinLeave *.* mkview
					autocmd BufWinEnter *.* silent loadview

				You may also want to use plugin restore_view.vim. 

			If there is an "mkview error E190: Cannot open for writing" error, then likely the ~/.vim/ or ~/.vim/view/ was created used a priviledged user. verify that the folder has proper permissions to be written to from the current user.
			#save
		#fold
	#misc
#vim

#hotkeys
   #workstations
        ctrl + alt + arrow key to switch between them
        ctrl + alt + shift + arrow key to move a window between them
        ctrl + l to clear screen #can also use bash command $clear
   #workstations
#hotkeys

#applications
	#tricks	
		#edit starting placement of app
			nano /usr/share/applications/gnome-terminal.desktop
			Exec=gnome-terminal --geometry 80x24+1000+900      #defines new location with new flag --geometry
		#start an application in background () &> &
			$application &
		#stop process from dying if hangup or no input
			nohup $process
		#break process from shell (avoid killing process with killing terminal)     
			# starts application in background and separates process from shell; then kills shell
			($application &> /dev/null &); exit                
			runs $application from a subshell
			( $application ) 
			# starts application in background
			$application &   
			# redirects both stdout and stderr to the null device 
			"&> /dev/null" 
	#tricks	
	#misc
		#vscode 
			#start vscode from terminal 
			code	# opens previously used folder	
			code . || code specific/Folder/	|| code Folder/file.txt
		#vscode 
	#misc

#applications


#PDFs
        #single/multiple pdfs grep
        find /path -name '*.pdf' -exec sh -c 'pdftotext "{}" - | grep --with-filename --label="{}" --color "your pattern"' \; #needs a path and pattern, but that's it
        #single/multiple pdfs grep

        libreoffice --convert-to "pdf" file.txt            #creates/takes text file and then converts to pdf
        convert xc:none -page Letter a.pdf                 #creates empty pdf file

        #combine pdfs
        magick -density 300 1.pdf 2.pdf a-third.pdf  final-combined.pdf                   
        gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=temp.pdf pdf1.pdf pdf2.pdf #combine pdfs
        #combine pdfs

		#extract range
		gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dFirstPage=1 -dLastPage=10 -sOutputFile=output.pdf input.pdf

		for more complicated extractions, it would be recommended to use a tool such as QPDF
		#extract range
#PDFs

#Pics/Monitor
        xrandr --output eDP-1 --rotate normal              #rotates screen to the normal position (can be changed to left/right)
        feh 'file.png'                                     # opens picture from terminal
        img2pdf img.png img2.png -o newPdf.pdf             #creates pdf file of given list of pictures (EX for multiple: img2pdf page*.png -o newPdf.pdf
#Pics/Monitor

#Github
	git add -A .      or git add --all :/
	git commit -m 'commit message from terminal'
	git commit -a or --all                           #adds all TRACKED changes
	git push origin <branch name>
	git checkout master/<branch name>                #changes to given branch
	git reset --hard origin/master                   #take remote repo from master branch
	git stash [stash/drop]

	#view git issues
	 	(https://npmjs.org/package/git-issues)
	 	npm install -g git-issues  #to install git-issues
		git issues        #view all open issues in git
		git issues -s closed    #view all closed issues in git
	#view git issues
#Github

#bash
	#general
		File endings are typically .sh,.bash,.ksh

		chmod +0755 /path/to/yourscript.sh       #Give w/r/execute permission to your script
		./path/to/yourscript.sh               #And to run your script
		bash bashFile   or  ./bashfilename.bash

		^uniqueCommandTxet^uniqueCommandText
		^x^y	caret substitution trick that takes the last command and replaces the first instance of "x" with "y"
		!!		runs the previous command
					^can also be used for substitution when replacing more than one word 
						!!:gs/foo/bar/
	#general
	#bash prompt
		(Note: prepend "export " to all "PS1=" commands to properly set the environment variable
		(Note: ${debian_chroot:+($debian_chroot)} lets Bash know if you’re using a Debian chroot environment (normally won’t be shown)
		#color
			 \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$
			 Breaks down to:
				\[\033[01;32m\]\u@\h set \u@\h to bold green
				\[\033[00m\]:        set : to normal white
				\[\033[01;34m\]\w    set \w to bold blue
				\[\033[00m\]\$       set $ to normal white   

			 \[\033[ATTRIBUTE;COLORm\]
			 #color
				Black: 30
				Blue: 34
				Cyan: 36
				Green: 32
				Purple: 35
				Red: 31
				White: 37
				Yellow: 33

				e.g. \[\033[32m\] for purple text
			 #color
			 #attributes  
				attribute must be added before the color number, separated by a semicolon (;)
				
				Normal Text: 0
				Bold or Light Text: 1 (It depends on the terminal emulator.)
				Dim Text: 2
				Underlined Text: 4
				Blinking Text: 5 (This does not work in most terminal emulators.)
				Reversed Text: 7 (This inverts the foreground and background colors, so you’ll see black text on a white background if the current text is white text on a black background.)
				Hidden Text: 8
			 #attributes  
			 #background
				Note: can also specify a background color, but you can’t add an attribute to a background color.

				Black: 40
				Blue: 44
				Cyan: 46
				Green: 42
				Purple: 45
				Red: 41
				White: 47
				Yellow: 43
				
				e.g. \[\033[42m\]\[\033[31m\]\u@\[\033[00m\]: to have a green background and red foretext color
						 ^background ^foretext     
				The background and foreground text colors keep going past the prompt unless you specify color code 00 clear the color information 
			 #background

		#color
		#use command output
		 PS1="\u@\h on $(uname -s -r) \w\$ "    #puts the output of a command into the prompt
		#use command output
		#special characters
		 \a       A bell character 
		 \d       The date, in “Weekday Month Date” format (e.g., “Tue May 26”) 
					 The format is passed to strftime(3) and the result is inserted into the prompt string; 
					 an empty format results in a locale-specific time representation. The braces are required: \D{format}
		 \e       An escape character 
		 \h       The hostname, up to the first ‘.’ 
		 \H       The hostname 
		 \j       The number of jobs currently managed by the shell 
		 \l       The basename of the shell’s terminal device name 
		 \n       A newline 
		 \r       A carriage return 
		 \s       The name of the shell, the basename of $0 (the portion following the final slash) 
		 \t       The time, in 24-hour HH:MM:SS format 
		 \T       The time, in 12-hour HH:MM:SS format 
		 \@       The time, in 12-hour am/pm format 
		 \A       The time, in 24-hour HH:MM format 
		 \u       The username of the current user 
		 \v       The version of Bash (e.g., 2.00) 
		 \V       The release of Bash, version + patchlevel (e.g., 2.00.0) 
		 \w       The current working directory, with $HOME abbreviated with a tilde (uses the $PROMPT_DIRTRIM variable) 
		 \W       The basename of $PWD, with $HOME abbreviated with a tilde 
		 \!       The history number of this command 
		 \#       The command number of this command 
		 \$       If the effective uid is 0, #, otherwise $ 
		 \nnn     The character whose ASCII code is the octal value nnn
		 \\       A backslash 
		 \[       Begin a sequence of non-printing characters. This could be used to embed a terminal control sequence into the prompt 
		 \]       End a sequence of non-printing characters 
		#special characters
	#bash prompt
	#Scripting
		#Aliases
			#to add aliases, cd into .bash_aliases || .bashrc || .bash_profile
			#after adding a new alias, use: source ~/.bash_aliases for whichever file you added it to
					#source is a bash shell built-in command that executes the content of the file passed as argument, in the CURRENT shell. 
					#It has a synonym in . (period)
			alias newCommand="cd /really/long\ and\ spaced/directory"      #can use either " or ' with no difference when setting the alias
			#also can be used to shorten current commands e.g....
			alias mlp="pwd"                              #pwd shows the path of the current directory, and now can be called with only the command p
			#to ignore an alias for a commmand
			$ ls    vs    $ \ls
			#Other examples include:
					alias ls='ls -al /etc'              #to temporarily disable the alias, simply use the \ key e.g. '\ls' to use the normal ls command
					alias pl="mlp; newCommand"
					alias dir="ls -al | grep ^d"         #displays all sub-directories (with permissions) that are within the current directory
		#Aliases
		#functions
			declare {-F}            #prints all available functions declared in the current shell. with -F the code will NOT appear
			unset -f functionName	#remove function definitions 
			#while loops
				#infinite while loop. every 10 seconds, clear screen, ls, and show tail of file
				while :; do  l; tail test.txt; sleep 10s; done
				#loop through each item found through grep (this example renames the item using sed)
				ls | grep -E "\.\.mp3" | while read -r line ; do mv "$line" "`echo $line | sed "s/\.\.mp3/.mp3/"`"  ; done
			#while loops
			#for loops
				for n in {1..5}; do <COMMAND>; done
						iterates through 1 - 5 and repeats the processes between do and done before exiting
				#!/bin/bash
				lst='a b c d e'
				for i in $lst; do
				echo "$i";
				done
			#for loops
			#if
				#square brackets
				# Single [] are posix shell compliant condition tests
				# Double [[]] are an extension to []. they support additional operations,
					|| instead of -o
					regex matching with =~
				#square brackets
				count=5
				regex="[0-9]"
				stri="meh"
				if [ $count == 5 ];	then
					echo "$count"
				elif [ $count = 4 ] && [ $stri == "meh" ]; then
					echo "$count"
				elif [[ $count =~ $regex ]]; then
					echo "$count"
				elif [ $count = 4 ]; then
					echo "$count"
				else;
					echo "count is not 4 or 5";
				#fi denotes the end of a complex expression in base scripting language
				fi
			#if
			#case
				case "$count" in
				5)
				echo "count is five"
				;;
				6)
				echo "count is six"
				;;
				*)
				echo "none of the above"
				esac                     #esac (case backwards) denotes the end of a case statement
			#case
		#functions
	#Scripting
	#profile 
		#get id
		dconf dump /org/gnome/terminal/legacy/profiles:/ | awk '/\[:/||/visible-name=/'
		#get id
		#set
		xdotool key shift+F10 r 3		#emulates keypresses. shift+F10 brings up a right click menu. 'r' goes to profiles. '3' == 3rd profile
		#set

	#profile 
#bash

#starting applications || setting window size location place placement 
        setwindow <application> <horizontal-position> <vertical-position> <horizontal-size (%)> <vertical-size (%)>
                from: https://askubuntu.com/questions/613973/how-can-i-start-up-an-application-with-a-pre-defined-window-size-and-position
                e.g. $setwindow gnome-terminal 0 0 50 100
#starting applications || setting window size location place placement 

#tmux
	#basics 
		(all come after ctrl+b/ctrl+a)
		? get help
		:							Enter command mode

		:info						get info session, windows, panes, ...
		:killall					kill tmux altogether
		:set -g mouse on
		:set -g mouse off
		:setw -g mode-keys vi		use vi keys in buffer
		set -g OPTION				Set OPTION for all sessions
		setw -g OPTION				Set OPTION for all windows

		bind-key T swap-window -t 0		~/.tmux.conf

		shift + i			reload current session of tmux
		r					reload ~/.tmux.conf (self-made hotkey)
	#basics 
	#sessions
		(		move to previous session
		)		move to next session
		s		list sessions
				  :ls
				  :list-sessions
		$		rename the current session
		d		detach from the current session
				  :attach -d

		:a -t mysession
			:at -t mysession
			:attach -t mysession
			:attach-session -t mysession

		:new-session -s sessionName
		:new -s sessionName

		:kill-ses -t mysession			kill/delete session mysession
		:kill-session -t mysession		kill/delete session mysession
		:kill-session -a				kill/delete all sessions but the current

		:kill-session -a -t mysession	kill/delete all sessions but mysession
	#sessions
	#windows
		c 							create a new window
		, 							rename the current window
										:rename-window newName
		&							close current window
		w 							list windows
		s							list sessions, windows, and panes
		n 							change to the next window
		p 							change to the previous window
		0 							to 9 select windows 0 through 9
		Ctrl+Shift Left/Right		move the current window to the left/right (no need to use the modifier)
		
		:move-window -t 1 -s 5					move window to available slot 
		:swap-window -s source -t target		swap window numbers (must be by window number)
		:swap-window -t 0						To swap the current window with the top window, do:
		:swap-window -t -1						swap current window left by one position

		:move-window -t session:window differentSession		move window to a different session
		:link-window -t target -source						share a window betwen two sessions - useful when using the same file across different projects/work
	#windows
	#panes
		% 			split pane vertically
		" 			split pane horizontally "

		h 			move to the left pane.
		j 			move to the pane below
		l 			move to the right pane
		k 			move to the pane above

		o 			switch to next pane
		;			toggle last active pane
		q 			show pane numbers
		q 0...9		switch to a pane by number
		z			toggle pane zoom
		!			convert pane into a window
		
		:break-pane				break the pane into it''s own window
		:join-pane -s -t		join a pane into the selected window/session
		#resize
			command key then arrow keys
			can use command key then ctrl+arrows to move with more precision
			
			by holding the arrow key it will continue to resize
		#resize

		{ 			swap with pane on the left
		} 			swap with pane on the right
		! 			break the pane out of the window
		x 			kill the current pane
		arrow		switch to pane in the direction of the arrow
						can also use vim bindings to do so! (e.g. ctrl+b j to switch to the pane below
		spacebar	toggle pane layouts

		:setw synchronize-panes		toggle the ability to send commands to all panes at the same time
	#panes
	#copy mode
		Ctrl + b [				Enter copy mode
		Ctrl + b PgUp			Enter copy mode and scroll one page up
		q						Quit mode
		g						Go to top line
		G						Go to bottom line
		arrow					Scroll up
		arrow					Scroll down
		h						Move cursor left
		j						Move cursor down
		k						Move cursor up
		l						Move cursor right
		w						Move cursor forward one word at a time
		b						Move cursor backward one word at a time
		/						Search forward
		?						Search backward
		n						Next keyword occurance
		N						Previous keyword occurance
		Spacebar				Start selection
		Esc						Clear selection
		Enter					Copy selection
		Ctrl + b ]				Paste contents of buffer_0


		:show-buffer				display buffer_0 contents
		:capture-pane			copy entire visible contents of pane to a buffer
		:list-buffers			Show all buffers
		:choose-buffer			Show all buffers and paste selected
		:save-buffer buf.txt 	Save buffer contents to buf.txt
		:delete-buffer -b 1  	delete buffer_1
	#copy mode
	#logging
		alt + c					Clear pane history with prefix + 
		shift + p				Toggle (start/stop) logging in the current pane.
		alt + p					Save visible text, in the current pane
		alt + shift + p 		Save complete pane history to a file. Convenient if you retroactively remember you need to log/save all work. 
									NOTE: history limit is 50,000.
	#logging
#tmux

#Apache2
   #On/Off
        sudo service apache2 start
        sudo service apache2 restart
        sudo service apache2 stop
   #On/Off
   #Data
        sudo systemctl status apache2                      #
        vi /etc/apache2/mods-enabled/status.conf           #
        ps -eo comm,etime,user | grep apache2              #gives runtime
   #Data
#Apache2

#iphone 
   #pictures
        sudo apt install ifuse
        sudo apt install shotwell
        sudo apt install libimobiledevice-utils
        idevicepair validate
   #if ^ returns an error then -> 
        idevicepair pair
   #after success ->
        mkdir ~/pics && ifuse ~/pics
#iphone 

#encryption
   #using crypt 
	 	(uses key cipher (weeeeeaaaaakkkk))
   		sudo apt-get install crypt
        cat my.txt | crypt > my.cpy         #encrypts
        cat my.cpy                          #verify encryption
        cat my.cpy | crypt > my.file.txt    #decrypt
                enigma PASSWORD < my.cpy            #Under FreeBSD you can use enigma (same command with different name – the crypt utility, also known as enigma), to displays the previously created file on the terminal
   #using crypt 
   #using ccrypt
		(based on AES, but 256-bit block size)
        sudo apt-get install ccrypt
        ccrypt filename                     #encrypt
        ccrypt –d encryptedfilename         #decrypt
                -e, –encrypt :Encrypt. This is the default mode. If filename arguments are given, encrypt the files and append the suffix .cpt to their names. Otherwise, run as a filter.
                -d, –decrypt: Decrypt. If filename arguments are given, decrypt the files and strip the suffix .cpt from the filenames, if present. Otherwise, run as a filter.
                -c, –cat: Decrypt one or more files to standard output. If no filename arguments are given, decrypt as a filter. Implies -l.
                -x, –keychange: Change the key of encrypted data. In this mode, ccrypt prompts for two passwords: the old one and the new one. If filename arguments are given, modify the files. Otherwise, run as a filter.
                -u, –unixcrypt: Simulate the old unix crypt command. 
         Note: the cipher used by unix crypt has been broken and is not secure. Please use this option only to decrypt existing files. If filename arguments are given, decrypt the files to stdout. Otherwise, run as a filter. 
         Note that for the unix crypt format, there is no easy way to detect whether a given key matches or not; thus, for safety, this mode does not overwrite files.
   #using ccrypt
#encryption


#MacOS VM on linux virtbox   
    #(instructions were adapted from https://www.pcsteps.com/2157-mac-os-x-virtual-machine-vmware-player/#Setting_up_macOS_High_Sierra)

    #create a MacOS ISO (high sierra is given case)
        #using another mac device, go to https://apps.apple.com/us/app/macos-high-sierra/id1246284741?mt=12 to begin installation of macOS installer
        It will appear in your applications folder. Run the following commands to convert it into an ISO image
        # Create High Sierra DMG Disk Image
        hdiutil create -o /tmp/Highsierra -size 7900m -volname highsierra -layout SPUD -fs HFS+J

        # Mount DMG Image to your macOS
        hdiutil attach /tmp/Highsierra.dmg -noverify -mountpoint /Volumes/Highsierra

        # Create a High Sierra ISO image
        sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Highsierra

        # Unmount Disk Image
        hdiutil detach /volumes/Install\ macOS\ High\ Sierra

        # Convert DMG to ISO
        hdiutil convert /tmp/Highsierra.dmg -format UDTO -o ~/Desktop/Highsierra

        # Rename and Move ISO Image to Desktop
        mv ~/Desktop/Highsierra.cdr ~/Desktop/Highsierra.iso

        #if there is a problem with "createinstallmedia" tool, follow this tutorial to fix it:
        https://techsviewer.com/how-to-download-full-macos-catalina-installer-and-mojave/
   #convert ISO image to VDMK
        VBoxManage convertfromraw fullfilepath.ISO fullfilepath.VMDK #change to .VDI if wanted
   #create machine
        "macOS." On "Type" we choose "Mac OS X, " and as for the version, we have to select "macOS 10.13 High Sierra (64-bit)."\

        On the next screen, if we have the RAM to spare, we allocate at least 4096MB RAM.

        On the last screen, choose the last option to use an existing hard disk drive.

        Click on the folder icon and navigate to the Virtual Machine Disk Format (.VMDK) file, and open it
   #edit machine settings
        At the "System" section, uncheck the Floppy drive from the boot order and make sure the Chipset is IHC9

        On the "Processor" tab, allocate two Processors, or more if we have a Core i7 CPU with threads to spare

        At the "Display" section, set the maximum Video Memory of 128MB.

        On the "Network" section, make sure the network setting is set to NAT

        Go back to "General" and write down the exact name given to the virtual machine

        Save the changes with OK and close VirtualBox completely. It is vital that Virtualbox isnt running for the next part
   #manipulate virtualMachine backend to make it think you are a mac device
        #if using windows, use: cd "C:\Program Files\Oracle\VirtualBox\"
        #then, change code snippets to start with VBoxManage.exe
        VBoxManage modifyvm "macOS" --cpuidset 00000001 000106e5 00100800 0098e3fd bfebfbff

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/efi/0/Config/DmiSystemProduct" "iMac11,3"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/efi/0/Config/DmiSystemVersion" "1.0"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/efi/0/Config/DmiBoardProduct" "Iloveapple"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/smc/0/Config/DeviceKey" "ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC" 1
   #create a fixed-size partition of memory
        Settings -> Storage tab, add new storage attachment (hover over buttons to see which one is correct).

   #Start machine
        After waiting for some code to pass, for a loading screen to pass, and for a grey screen to pass...

        Go to disk utility; choose the fixed partition created in the last step

        Erase partition while choosing a memory format (suggested is journaled, but as long as you use something with GUID it will work)

        Go back to start (either HostKey+Q or in one of the top left tabs on the screen)

        Choose a new installation of high sierra

        Accept the agreement and then choose the fixed-partition disk.

   #After this, your vm will fail to boot properly and then begin the loading process again
#MacOS VM on linux virtbox   




#redhat linux machine shennanigans
   #turn volume to 100%, and then text-to-voice what you want
        amixer -c 0 set Master 0DB && amixer -c 0 set Speaker+LO 0DB && amixer -c 0 set PCM 0DB && amixer set Master unmute && amixer set Speaker unmute
        spd-say “hello” -p -100 -r -100 -t female2

        #sets background to a file image
        gsettings set org.gnome.desktop.background picture-uri file:///home//seclabu3/Downloads/slowloris.gif;

        #modifies the current background image to be stretched, filled, etc. 
        gsettings set org.gnome.desktop.background picture-options 'stretched';

   #script to loop through a number of hosts and modify wallpapers
      USER=user
      PASSWORD="pass"
      
      hostlst='hostname@domainName.com hostname2@domainName.com'
      
      #loop to go through each machine
      for i in $hostlst; do
         #sftp to put file into target computer
         ftp -inv $HOST <<EOF
         user $USER $PASSWORD
         cd /home/seclabu3/Downloads
         mput .slowloris.gif
         bye
         EOF
         
         spawn ssh $i "cd /home/seclabu3/Downloads/"
         expect "password:"
         send "$PASSWORD"
      done
#redhat linux machine shennanigans

#change background image and image settings
        gsettings set org.gnome.desktop.background picture-uri file:///home//seclabu3/Downloads/slowloris.gif;
        gsettings set org.gnome.desktop.background picture-options 'stretched';
#change background image and image settings


#Shortcuts/hotkeys cont.
   #create the keybinding by editing (adding to-) the list that is returned by the command
        gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings
   #The returned list looks like (if it were only one shortcut currently)
        ['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']
   #Apply the edited list by the command
        gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "[<altered_list>]"
   #set properties
        #set name
                gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ name 'shortcu tName'
        #set command
                gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ command 'xdg-open ~/Luddy.linkedin'
        #set binding
                gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ binding '<Alt>1q'
        #list of binding names
                Super key:                 <Super>
                Control key:               <Primary> or <Control>
                Alt key:                   <Alt>
                Shift key:                 <Shift>
                numbers:                   1 (just the number)
                Spacebar:                  space
                Slash key:                 slash
                Asterisk key:              asterisk (so it would need `<Shift>` as well)
                Ampersand key:             ampersand (so it would need <Shift> as well)
                Caps_Lock

                a few numpad keys:
                Numpad divide key (`/`):   KP_Divide
                Numpad multiply (Asterisk):KP_Multiply
                Numpad number key(s):      KP_1
                Numpad `-`:                KP_Subtract

                #fn does not have a binding key, as fn keys alter the keyboard signal before it reaches the processor. 
#Shortcuts/hotkeys cont.


#python
	#terminal
		#debug
			#pdb
				native debugger (no need for pip install, but no builtin autocompletion)
				intrusive debug (have to put code in the program)
				   import pdb     
				   # put the following statement where you want the code to stop and step to pdb
				   pdb.set_trace()
				non-intrusive debug (run from terminal)
				   python -m pdf script.py
			#pdb
	#debug
	#terminal
	#bpython
		#install bpython (via a package manager, or pip install bpython) and get a better drop-in replacement for the python REPL 
		#Syntax highlighting, autocompletion, inline documentation as you type commands, autoindentation, etc
		#to install
		sudo python3 pip -m install bpython  
		#call it with
		bpython
	#bpython
#python

#ffmpeg
	#free/open-source project for handling video/audio/multimedia
	#documentation: http://ffmpeg.org/ffmpeg.html#TOC53*
	#rotate video
	ffmpeg -i videoThing.mp4 -vf "transpose=1" newVideoThing.mp4
	
	#0 = 90CounterCLockwise and Vertical Flip (default) 
	#1 = 90Clockwise 
	#2 = 90CounterClockwise 
	#3 = 90Clockwise and Vertical Flip      

	#flip horizontal
		ffmpeg -i in.avi -vf "hflip" out.avi
	#flip horizontal
	#speed up video  
		Note that this method will drop frames to achieve the desired speed

		ffmpeg -i videoThing.mp4 -filter:v "setpts=0.5*PTS" newVideoThing.mp4
	#speed up video  
	
	#Avoid dropped frames by specifying a higher output frame rate than the input
	#For example, to go from an input of 4 FPS to one that is sped up to 4x that (16 FPS):
	ffmpeg -i videoThing.mp4 -r 16 -filter:v "setpts=0.25*PTS" newVideoThing.mp4
	#You can smooth out slow/fast video with the ​minterpolate video filter. This is also known as "motion interpolation" or "optical flow". 
	ffmpeg -i videoThing.mp4 -filter:v "minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120'" newVideoThing.mp4
#ffmpeg

#docker
	#build
		docker build [options] .			Create an image from a Dockerfile.	
			-t "app/container_name"    # name
	#build
	#run
		docker run [options] IMAGE			Run a command in an image.	
			  # see `docker create` for options
	#run
	#create
		docker create [options] IMAGE
			-a, --attach				# attach stdout/err
			-i, --interactive			# attach stdin (interactive)
			-t, --tty					# pseudo-tty
			--name NAME					# name your image
			-p, --publish 5000:5000    	# port map
			--expose 5432				# expose a port to linked containers
			-P, --publish-all			# publish all ports
			--link container:alias		# linking
			-v, --volume `pwd`:/app		# mount (absolute paths needed)
			-e, --env NAME=hello		# env vars
			
		#example
			$ docker create --name app_redis_1 \
			  --expose 6379 \
			  redis:3.0.2
		#example
	#create
	#exec
		docker exec [options] CONTAINER COMMAND				run commands in a container.	
			-d, --detach        # run in background
			-i, --interactive   # stdin
			-t, --tty           # interactive

		#example
			docker exec app_web_1 tail logs/development.log
			docker exec -t -i app_web_1 rails c
		#example
	#exec
	#start
		docker start [options] CONTAINER			Start/stop a container.	
			-a, --attach        # attach stdout/err
			-i, --interactive   # attach stdin

		docker stop [options] CONTAINER
	#start
	#manage
		ps
		ps -a
		CTRL-P CTRL-Q			Detach current running container (provided it was started it -it)
		attach containerID		Re-attach container
									can also use $ docker attach --name containerName
		stop containerName		stop given container
		kill $ID
		docker rmi				Deletes images.
		network ls
		network rm networkId
		network prune
	#manage
	#images
		docker images -a		show images (-a to include intermediate)
		docker rmi				Deletes images.
								docker rmi b750fe78269d
	#images
#docker

#citrix
		#citrix receiver has an ssl error of "You have not chosen to trust ... the issuer to the server’s security certificate"
		#root certificates of Firefox can be shared with the Citrix receiver with only one command via symbolic links. The whole works as follows:
		sudo ln -s /usr/share/ca-certificates/mozilla/* /opt/Citrix/ICAClient/keystore/cacerts
#citrix
