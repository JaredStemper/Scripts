
###Pics/Monitor:
        xrandr --output eDP-1 --rotate normal              #rotates screen to the normal position (can be changed to left/right)
        feh 'file.png'                                     # opens picture from terminal
        img2pdf img.png img2.png -o newPdf.pdf             #creates pdf file of given list of pictures (EX for multiple: img2pdf page*.png -o newPdf.pdf)


###Github:
        git add -A .      or git add --all :/
        git commit -m 'commit message from terminal'
        git commit -a or --all                           #adds all TRACKED changes
        git push origin <branch name>
        git checkout master/<branch name>                #changes to given branch
        git reset --hard origin/master                   #take remote repo from master branch
        git stash [stash/drop]

###Scripting:
   ##Aliases:
        #to add aliases, cd into .bash_aliases || .bashrc || .bash_profile
        #after adding a new alias, use: source ~/.bash_aliases for whichever file you added it to
                #source is a bash shell built-in command that executes the content of the file passed as argument, in the CURRENT shell. 
                #It has a synonym in . (period)
        alias newCommand="cd /really/long\ and\ spaced/directory"      #can use either " or ' with no difference when setting the alias
        #also can be used to shorten current commands e.g....
        alias mlp="pwd"                              #pwd shows the path of the current directory, and now can be called with only the command: p
        #to ignore an alias for a commmand
        $ ls    vs    $ \ls
        #Other examples include:
                alias ls='ls -al /etc'              #to temporarily disable the alias, simply use the \ key e.g. '\ls' to use the normal ls command
                alias pl="mlp; newCommand"
                alias dir="ls -al | grep ^d         #displays all sub-directories (with permissions) that are within the current directory

   ###Bash:                                              #File endings are typically .sh,.bash,.ksh
        ##general
                chmod +0755 /path/to/yourscript.sh                    #Give w/r/execute permission to your script
                ./path/to/yourscript.sh                             #And to run your script
                bash bashFile   or  ./bashfilename.bash
           ##for loops
                for n in {1..5}; do <COMMAND>; done
                        iterates through 1 - 5 and repeats the processes between do and done before exiting
                #!/bin/bash
                lst='a b c d e'
                for i in $lst; do
                echo "$i";
                done

           ##if statements
                count=5
                if [ $count == 5 ]
                then
                echo "$count"
                elif [ $count = 4 ]
                then
                echo "$count"
                else
                echo "count is not 4 or 5"
                ##fi denotes the end of a complex expression in base scripting language
                fi
           ##case statements
                case "$count" in
                5)
                echo "count is five"
                ;;
                6)
                echo "count is six"
                ;;
                *)
                echo "none of the above"
                esac                     #esac (case backwards) denotes the end of a case statement

###starting applications || setting window size location place placement 
        setwindow <application> <horizontal-position> <vertical-position> <horizontal-size (%)> <vertical-size (%)>
                from: https://askubuntu.com/questions/613973/how-can-i-start-up-an-application-with-a-pre-defined-window-size-and-position
                e.g. $setwindow gnome-terminal 0 0 50 100
###starting applications || setting window size location place placement 


###Apache2
   ##On/Off:
        sudo service apache2 start
        sudo service apache2 restart
        sudo service apache2 stop
   ##Data:
        sudo systemctl status apache2                      #
        vi /etc/apache2/mods-enabled/status.conf           #
        ps -eo comm,etime,user | grep apache2              #gives runtime
###Apache2

###iphone 
   ##pictures:
        sudo apt install ifuse
        sudo apt install shotwell
        sudo apt install libimobiledevice-utils
        idevicepair validate
   ##if ^ returns an error then -> 
        idevicepair pair
   ##after success ->
        mkdir ~/pics && ifuse ~/pics
###iphone 

###encryption
   ##using crypt  (uses key cipher (weeeeeaaaaakkkk))
        sudo apt-get install crypt
        cat my.txt | crypt > my.cpy         #encrypts
        cat my.cpy                          #verify encryption
        cat my.cpy | crypt > my.file.txt    #decrypt
                enigma PASSWORD < my.cpy            #Under FreeBSD you can use enigma (same command with different name – the crypt utility, also known as enigma), to displays the previously created file on the terminal
   ##using ccrypt (based on AES, but 256-bit block size)
        sudo apt-get install ccrypt
        ccrypt filename                     #encrypt
        ccrypt –d encryptedfilename         #decrypt
                -e, –encrypt :Encrypt. This is the default mode. If filename arguments are given, encrypt the files and append the suffix .cpt to their names. Otherwise, run as a filter.
                -d, –decrypt: Decrypt. If filename arguments are given, decrypt the files and strip the suffix .cpt from the filenames, if present. Otherwise, run as a filter.
                -c, –cat: Decrypt one or more files to standard output. If no filename arguments are given, decrypt as a filter. Implies -l.
                -x, –keychange: Change the key of encrypted data. In this mode, ccrypt prompts for two passwords: the old one and the new one. If filename arguments are given, modify the files. Otherwise, run as a filter.
                -u, –unixcrypt: Simulate the old unix crypt command. 
			Note: the cipher used by unix crypt has been broken and is not secure. Please use this option only to decrypt existing files. If filename arguments are given, decrypt the files to stdout. Otherwise, run as a filter. 
			Note that for the unix crypt format, there is no easy way to detect whether a given key matches or not; thus, for safety, this mode does not overwrite files.
###encryption


###MacOS VM on linux virtbox   
    #(instructions were adapted from https://www.pcsteps.com/2157-mac-os-x-virtual-machine-vmware-player/#Setting_up_macOS_High_Sierra)

    ##create a MacOS ISO (high sierra is given case)
        #using another mac device, go to https://apps.apple.com/us/app/macos-high-sierra/id1246284741?mt=12 to begin installation of macOS installer
        It will appear in your applications folder. Run the following commands to convert it into an ISO image
        # Create High Sierra DMG Disk Image
        hdiutil create -o /tmp/Highsierra -size 7900m -volname highsierra -layout SPUD -fs HFS+J

        # Mount DMG Image to your macOS
        hdiutil attach /tmp/Highsierra.dmg -noverify -mountpoint /Volumes/Highsierra

        # Create a High Sierra ISO image
        sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Highsierra

        # Unmount Disk Image
        hdiutil detach /volumes/Install\ macOS\ High\ Sierra

        # Convert DMG to ISO
        hdiutil convert /tmp/Highsierra.dmg -format UDTO -o ~/Desktop/Highsierra

        # Rename and Move ISO Image to Desktop
        mv ~/Desktop/Highsierra.cdr ~/Desktop/Highsierra.iso

        #if there is a problem with "createinstallmedia" tool, follow this tutorial to fix it:
        https://techsviewer.com/how-to-download-full-macos-catalina-installer-and-mojave/
   ##convert ISO image to VDMK
        VBoxManage convertfromraw fullfilepath.ISO fullfilepath.VMDK #change to .VDI if wanted
   ##create machine
        "macOS." On "Type" we choose "Mac OS X, " and as for the version, we have to select "macOS 10.13 High Sierra (64-bit)."\

        On the next screen, if we have the RAM to spare, we allocate at least 4096MB RAM.

        On the last screen, choose the last option to use an existing hard disk drive.

        Click on the folder icon and navigate to the Virtual Machine Disk Format (.VMDK) file, and open it
   ##edit machine settings
        At the "System" section, uncheck the Floppy drive from the boot order and make sure the Chipset is IHC9

        On the "Processor" tab, allocate two Processors, or more if we have a Core i7 CPU with threads to spare

        At the "Display" section, set the maximum Video Memory of 128MB.

        On the "Network" section, make sure the network setting is set to NAT

        Go back to "General" and write down the exact name given to the virtual machine

        Save the changes with OK and close VirtualBox completely. It is vital that Virtualbox isn't running for the next part
   ##manipulate virtualMachine backend to make it think you are a mac device
        #if using windows, use: cd "C:\Program Files\Oracle\VirtualBox\"
        #then, change code snippets to start with VBoxManage.exe
        VBoxManage modifyvm "macOS" --cpuidset 00000001 000106e5 00100800 0098e3fd bfebfbff

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/efi/0/Config/DmiSystemProduct" "iMac11,3"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/efi/0/Config/DmiSystemVersion" "1.0"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/efi/0/Config/DmiBoardProduct" "Iloveapple"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/smc/0/Config/DeviceKey" "ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"

        VBoxManage setextradata "macOS" "VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC" 1
   ##create a fixed-size partition of memory
        Settings -> Storage tab, add new storage attachment (hover over buttons to see which one is correct).

   ##Start machine
        After waiting for some code to pass, for a loading screen to pass, and for a grey screen to pass...

        Go to disk utility; choose the fixed partition created in the last step

        Erase partition while choosing a memory format (suggested is journaled, but as long as you use something with GUID it will work)

        Go back to start (either HostKey+Q or in one of the top left tabs on the screen)

        Choose a new installation of high sierra

        Accept the agreement and then choose the fixed-partition disk.

	#After this, your vm will fail to boot properly and then begin the loading process again
###MacOS VM on linux virtbox   




###redhat linux machine shennanigans

	#turn volume to 100%, and then text-to-voice what you want
        amixer -c 0 set Master 0DB && amixer -c 0 set Speaker+LO 0DB && amixer -c 0 set PCM 0DB && amixer set Master unmute && amixer set Speaker unmute
        spd-say “hello” -p -100 -r -100 -t female2

        #sets background to a file image
        gsettings set org.gnome.desktop.background picture-uri file:///home//seclabu3/Downloads/slowloris.gif;

        #modifies the current background image to be stretched, filled, etc. 
        gsettings set org.gnome.desktop.background picture-options 'stretched';

	#bash script to loop through a number of hosts and modify wallpapers
		USER=user
		PASSWORD="pass"
		
		hostlst='hostname@host.com hostname2@host.com'
		
		#loop to go through each machine
		for i in $hostlst; do
			#sftp to put file into target computer
			ftp -inv $HOST <<EOF
			user $USER $PASSWORD
			cd /home/seclabu3/Downloads
			mput .slowloris.gif
			bye
			EOF
			
			spawn ssh $i "cd /home/seclabu3/Downloads/"
			expect "password:"
			send "$PASSWORD"
		done
###redhat linux machine shennanigans

###change background image and image settings
        gsettings set org.gnome.desktop.background picture-uri file:///home//seclabu3/Downloads/slowloris.gif;
        gsettings set org.gnome.desktop.background picture-options 'stretched';
###change background image and image settings


###Shortcuts/hotkeys cont.
   #create the keybinding by editing (adding to-) the list that is returned by the command:
        gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings
   #The returned list looks like (if it were only one shortcut currently):
        ['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']
   #Apply the edited list by the command:
        gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "[<altered_list>]"
   #set properties
        #set name
                gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ name 'shortcu tName'
        #set command
                gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ command 'xdg-open ~/Luddy.linkedin'
        #set binding
                gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/ binding '<Alt>1q'
        #list of binding names
                Super key:                 <Super>
                Control key:               <Primary> or <Control>
                Alt key:                   <Alt>
                Shift key:                 <Shift>
                numbers:                   1 (just the number)
                Spacebar:                  space
                Slash key:                 slash
                Asterisk key:              asterisk (so it would need `<Shift>` as well)
                Ampersand key:             ampersand (so it would need <Shift> as well)
                Caps_Lock

                a few numpad keys:
                Numpad divide key (`/`):   KP_Divide
                Numpad multiply (Asterisk):KP_Multiply
                Numpad number key(s):      KP_1
                Numpad `-`:                KP_Subtract

                #fn does not have a binding key, as fn keys alter the keyboard signal before it reaches the computer. 
###Shortcuts/hotkeys cont.



###bpython
  ##install bpython (via a package manager, or pip install bpython) and get a better drop-in replacement for the python REPL 
  ##Syntax highlighting, autocompletion, inline documentation as you type commands, autoindentation, etc
        #to install
        sudo python3 pip -m install bpython  
        #call it with
        bpython
###bpython



###ffmpeg
  #free/open-source project for handling video/audio/multimedia
  ##documentation: http://ffmpeg.org/ffmpeg.html#TOC53*
  ##rotate video
        ffmpeg -i videoThing.mp4 -vf "transpose=1" newVideoThing.mp4
        #0 = 90CounterCLockwise and Vertical Flip (default) 
        #1 = 90Clockwise 
        #2 = 90CounterClockwise 
        #3 = 90Clockwise and Vertical Flip      
  ##flip horizontal
        ffmpeg -i in.avi -vf "hflip" out.avi
  ##speed up video  
        ffmpeg -i videoThing.mp4 -filter:v "setpts=0.5*PTS" newVideoThing.mp4
        ##Note that this method will drop frames to achieve the desired speed
        ####Avoid dropped frames by specifying a higher output frame rate than the input
        ####For example, to go from an input of 4 FPS to one that is sped up to 4x that (16 FPS):
                ffmpeg -i videoThing.mp4 -r 16 -filter:v "setpts=0.25*PTS" newVideoThing.mp4
        ##You can smooth out slow/fast video with the ​minterpolate video filter. This is also known as "motion interpolation" or "optical flow". 
                ffmpeg -i videoThing.mp4 -filter:v "minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120'" newVideoThing.mp4
###ffmpeg



